#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

const int min_tons_for_storage =  7000000; ;; 0.007 TON

;; 0 uint32, Pixel God loves you, Tiger ❤️
cell mint_notification_payload() asm "B{b5ee9c7241010101002700004a00000000506978656c20476f64206c6f76657320796f752c20546967657220e29da4efb88fcd059fd3} B>boc PUSHREF";

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;

(int, int, slice, slice) load_data() {
  slice ds = get_data().begin_parse();
  var (index, collection_address) = (ds~load_uint(32), ds~load_msg_addr());
  if (ds.slice_bits() > 0) {
    return (-1, index, collection_address, ds~load_msg_addr());
  } else {
    return (0, index, collection_address, null()); ;; nft not initialized yet
  }
}

() store_data(int index, slice collection_address, slice owner_address) impure {
  set_data(
    begin_cell()
        .store_uint(index, 32)
        .store_slice(collection_address)
        .store_slice(owner_address)
        .end_cell()
  );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  ifnot (builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {
  throw_unless(401, equal_slices(sender_address, owner_address));

  slice new_owner_address = in_msg_body~load_msg_addr();
  force_chain(new_owner_address);
  slice response_destination = in_msg_body~load_msg_addr();
  in_msg_body~load_int(1); ;; this nft don't use custom_payload
  int forward_amount = in_msg_body~load_coins();

  int rest_amount = my_balance - min_tons_for_storage;
  if (forward_amount) {
    rest_amount -= (forward_amount + fwd_fees);
  }
  int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
  if (need_response) {
    rest_amount -= fwd_fees;
  }

  throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

  if (forward_amount) {
    send_msg(new_owner_address, forward_amount, op::ownership_assigned, query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
  }
  if (need_response) {
    force_chain(response_destination);
    send_msg(response_destination, rest_amount, op::excesses, query_id, null(), 1); ;; paying fees, revert on errors
  }

  store_data(index, collection_address, new_owner_address);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  throw_if(0, in_msg_body.slice_empty?()); ;; ignore empty messages

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  throw_if(0, flags & 1); ;; ignore all bounced messages

  slice sender_address = cs~load_msg_addr();

  (int init?, int index, slice collection_address, slice owner_address) = load_data();
  ifnot (init?) {
    throw_unless(405, equal_slices(collection_address, sender_address));
    var new_owner_address = in_msg_body~load_msg_addr();
    send_msg(new_owner_address, 1, op::ownership_assigned, 0, begin_cell().store_slice(collection_address).store_maybe_ref(mint_notification_payload()), 1);  ;; paying fees, revert on errors
    return store_data(index, collection_address, new_owner_address);
  }
  
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::transfer) {
    transfer_ownership(my_balance, index, collection_address, owner_address, sender_address, query_id, in_msg_body, fwd_fee);
    return ();
  }
  if (op == op::get_static_data) {
    send_msg(sender_address, 0, op::report_static_data, query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
    return ();
  }
  throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address) = load_data();
  cell content = begin_cell().end_cell();

  return (init?, index, collection_address, owner_address, content);
}